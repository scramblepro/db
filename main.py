import random
import psycopg2
from telebot import types, TeleBot, custom_filters
from telebot.storage import StateMemoryStorage
from telebot.handler_backends import State, StatesGroup

#beta-version
print('start tg bot...')

conn = psycopg2.connect(
    dbname="english_bot",
    user="postgres",
    password="*********",
    host="localhost",
    client_encoding="utf8"
)
cursor = conn.cursor()

state_storage = StateMemoryStorage()
token_bot = '********************************'
bot = TeleBot(token_bot, state_storage=state_storage)

known_users = []
userStep = {}
buttons = []


class Command:
    ADD_WORD = '–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï'
    DELETE_WORD = '–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æüîô'
    NEXT = '–î–∞–ª—å—à–µ ‚è≠'


class MyStates(StatesGroup):
    target_word = State()
    translate_word = State()
    another_words = State()


def get_user_step(uid):
    if uid in userStep:
        return userStep[uid]
    else:
        known_users.append(uid)
        userStep[uid] = 0
        print("New user detected, who hasn't used \"/start\" yet")
        return 0


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –∏ /cards
@bot.message_handler(commands=['cards', 'start'])
def create_cards(message):
    cid = message.chat.id
    username = message.from_user.id #if message.from_user.id else "Unknown"

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    cursor.execute("""
        INSERT INTO users (chat_id, username) 
        VALUES (%s, %s)
        ON CONFLICT (chat_id) DO NOTHING;
    """, (cid, username))
    conn.commit()

    # –ü–æ–ª—É—á–µ–Ω–∏–µ user_id –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute("SELECT user_id FROM users WHERE chat_id = %s;", (cid,))
    user_id = cursor.fetchone()[0]

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–ª–æ–≤ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã words –≤ user_words –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute("""
        INSERT INTO user_words (user_id, word_id)
        SELECT %s, word_id FROM words
        ON CONFLICT DO NOTHING;
    """, (user_id,))
    conn.commit()

    if cid not in known_users:
        known_users.append(cid)
        userStep[cid] = 0
        bot.send_message(cid, "Hello, stranger, let's study English...")

    markup = types.ReplyKeyboardMarkup(row_width=2)
    buttons.clear()

    # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    cursor.execute("""
        SELECT w.word, w.translation 
        FROM words w
        JOIN user_words uw ON w.word_id = uw.word_id
        JOIN users u ON uw.user_id = u.user_id
        WHERE u.chat_id = %s
        ORDER BY RANDOM()
        LIMIT 1;
    """, (cid,))
    result = cursor.fetchone()

    if not result:
        bot.send_message(cid, "–ù–µ—Ç —Å–ª–æ–≤ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è. –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞.")
        return

    target_word, translate = result
    target_word_btn = types.KeyboardButton(target_word)  # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–æ–≤–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º
    buttons.append(target_word_btn)

    # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–∞
    cursor.execute("""
        SELECT word 
        FROM words 
        WHERE word != %s 
        ORDER BY RANDOM() 
        LIMIT 3;
    """, (target_word,))
    others = [row[0] for row in cursor.fetchall()]
    other_words_btns = [types.KeyboardButton(word) for word in others]
    buttons.extend(other_words_btns)

    random.shuffle(buttons)
    next_btn = types.KeyboardButton(Command.NEXT)
    add_word_btn = types.KeyboardButton(Command.ADD_WORD)
    delete_word_btn = types.KeyboardButton(Command.DELETE_WORD)
    buttons.extend([next_btn, add_word_btn, delete_word_btn])

    markup.add(*buttons)

    greeting = f"–í—ã–±–µ—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞:\nüá∑üá∫ {translate}"  # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Å–ª–æ–≤–∞
    bot.send_message(message.chat.id, greeting, reply_markup=markup)
    bot.set_state(message.from_user.id, MyStates.target_word, message.chat.id)
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data['target_word'] = target_word
        data['translate_word'] = translate
        data['other_words'] = others


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –î–∞–ª—å—à–µ
@bot.message_handler(func=lambda message: message.text == Command.NEXT)
def next_cards(message):
    create_cards(message)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ
@bot.message_handler(func=lambda message: message.text == Command.DELETE_WORD)
def delete_word(message):
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        target_word = data['target_word']
        cursor.execute("""
            DELETE FROM user_words 
            WHERE user_id = (SELECT user_id FROM users WHERE chat_id = %s)
            AND word_id = (SELECT word_id FROM words WHERE word = %s);
        """, (message.from_user.id, target_word))
        conn.commit()
        bot.send_message(message.chat.id, f"–°–ª–æ–≤–æ '{target_word}' —É–¥–∞–ª–µ–Ω–æ.")
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞
    bot.delete_state(message.from_user.id, message.chat.id)
    create_cards(message)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ
@bot.message_handler(func=lambda message: message.text == Command.ADD_WORD)
def add_word(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ –∏ –µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: —Å–ª–æ–≤–æ –ø–µ—Ä–µ–≤–æ–¥")
    bot.set_state(message.from_user.id, MyStates.translate_word, message.chat.id)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞
@bot.message_handler(state=MyStates.translate_word)
def save_new_word(message):
    try:
        word, translation = message.text.split()
        user_id = message.from_user.id

        cursor.execute("INSERT INTO words (word, translation, example) VALUES (%s, %s, %s) RETURNING word_id;",
                       (word, translation, "No example available."))
        word_id = cursor.fetchone()[0]

        cursor.execute("""
            INSERT INTO user_words (user_id, word_id)
            VALUES ((SELECT user_id FROM users WHERE chat_id = %s), %s);
        """, (user_id, word_id))

        cursor.execute("UPDATE users SET word_count = word_count + 1 WHERE chat_id = %s;", (user_id,))
        conn.commit()
        bot.send_message(message.chat.id,
                         f"–°–ª–æ–≤–æ '{word}' –¥–æ–±–∞–≤–ª–µ–Ω–æ. –¢–µ–ø–µ—Ä—å –≤—ã –∏–∑—É—á–∞–µ—Ç–µ {get_word_count(user_id)} —Å–ª–æ–≤.")
        bot.delete_state(message.from_user.id, message.chat.id)
    except Exception as e:
        bot.send_message(message.chat.id,
                         "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –≤–≤–æ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –∏ –ø–µ—Ä–µ–≤–æ–¥ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ: —Å–ª–æ–≤–æ "
                         "–ø–µ—Ä–µ–≤–æ–¥")


# –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ª–æ–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_word_count(user_id):
    cursor.execute("SELECT word_count FROM users WHERE chat_id = %s;", (user_id,))
    return cursor.fetchone()[0]


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞)
@bot.message_handler(func=lambda message: True, content_types=['text'])
def message_reply(message):
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        target_word = data['target_word']
        if message.text == target_word:
            bot.send_message(message.chat.id, "–ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
        else:
            bot.send_message(message.chat.id, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    next_cards(message)


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.add_custom_filter(custom_filters.StateFilter(bot))
bot.infinity_polling(skip_pending=True)
